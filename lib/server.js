// Generated by CoffeeScript 1.12.7
(function() {
  var ACCEPT_ANY_RTSP_URLS, DOCUMENT_ROOT, DO_SPAWN_PICAM, ENABLE_DEBUG_RTSP_URL, PICAM_CWD, PICAM_PATH, PICAM_UID, REC_DIR, SERVER_NAME, STREAM_TOKEN_LIFETIME, StreamServer, child_process, fs, path, picam, startStreamProcess, streamServer, url;

  StreamServer = require('node-rtsp-rtmp-server');

  fs = require('fs');

  url = require('url');

  path = require('path');

  child_process = require('child_process');

  PICAM_UID = 1000;

  PICAM_CWD = path.normalize(__dirname + "/..");

  PICAM_PATH = path.normalize(__dirname + "/../../picam/picam");

  DOCUMENT_ROOT = "/home/pi/public";

  REC_DIR = path.normalize(__dirname + "/../rec");

  ACCEPT_ANY_RTSP_URLS = true;

  ENABLE_DEBUG_RTSP_URL = false;

  DO_SPAWN_PICAM = true;

  SERVER_NAME = "Seaturtle/0.1";

  STREAM_TOKEN_LIFETIME = 30000;

  streamServer = new StreamServer({
    serverName: SERVER_NAME,
    documentRoot: DOCUMENT_ROOT
  });

  picam = null;

  startStreamProcess = function() {
    console.log("spawning picam");
    picam = child_process.spawn('nice', ['-n', '-20', 'ionice', '-c1', '-n0', 'sudo', '-u', "#" + PICAM_UID, PICAM_PATH, '--rtspout', '--alsadev', 'hw:1,0'], {
      cwd: PICAM_CWD,
      env: process.env
    });
    picam.stdout.setEncoding('utf8');
    picam.stdout.on('data', function(data) {
      return process.stdout.write(data);
    });
    picam.stderr.setEncoding('utf8');
    picam.stderr.on('data', function(data) {
      return process.stderr.write(data);
    });
    return picam.on('close', function(code, signal) {
      console.log("picam exited with code " + code + ", signal " + signal);
      return process.kill(process.pid, 'SIGTERM');
    });
  };

  streamServer.start(function() {
    if (DO_SPAWN_PICAM) {
      return startStreamProcess();
    }
  });

  process.on('SIGINT', function() {
    console.log("Got SIGINT. Sending SIGINT to picam");
    if (DO_SPAWN_PICAM && (picam != null)) {
      return child_process.exec('pidof picam', function(err, stdout, stderr) {
        var picamPid;
        if (err) {
          console.error("pidof command error: " + err);
          return;
        }
        picamPid = parseInt(stdout, 10);
        console.log("picam pid: " + picamPid);
        return process.kill(picamPid, 'SIGINT');
      });
    } else {
      return process.kill(process.pid, 'SIGTERM');
    }
  });

  process.on('uncaughtException', function(err) {
    console.error("uncaughtException");
    return console.error(err.stack);
  });

  streamServer.setLivePathConsumer(function(uri, callback) {
    var filename, pathname;
    pathname = url.parse(uri).pathname.slice(1);
    if (ACCEPT_ANY_RTSP_URLS) {
      console.log("accept pathname: " + pathname);
      callback(null);
      return;
    }
    if (ENABLE_DEBUG_RTSP_URL && pathname === 'mytest') {
      callback(null);
      return;
    }
    filename = "/run/shm/stream_token/" + pathname;
    return fs.exists(filename, function(exists) {
      if (exists) {
        return fs.stat(filename, function(err, stats) {
          if (err) {
            callback(err);
            return;
          }
          if (stats.mtime.getTime() + STREAM_TOKEN_LIFETIME < Date.now()) {
            console.log("Stream token is too old: " + pathname);
            return fs.unlink(filename, function() {
              return callback(new Error('Invalid token'));
            });
          } else {
            return fs.unlink(filename, callback);
          }
        });
      } else {
        return callback(new Error('Invalid URI'));
      }
    });
  });

}).call(this);
